-- @nsURI ERMetamodelo=http://database/1.0
-- @nsURI DCMetamodelo=http://classdiagrameditor/1.0

module transfDC2ER;
create outER : ERMetamodelo from inDC : DCMetamodelo;

rule Relacion2ForeingKey{
	from
		inDC : DCMetamodelo!Relacion
	to
		outER : ERMetamodelo!ForeignKey(
			column <- inDC.origen.atributos->asOrderedSet()->first(),
			reference <- inDC.destino
		)
}

rule Agregacion2ForeingKey{
	from
		inDC : DCMetamodelo!Agregacion
	to
		outER : ERMetamodelo!ForeignKey(
			column <- inDC.origen_a.atributos->asOrderedSet()->first(),
			reference <- inDC.destino_a
		)
}

rule Composicion2ForeingKey{
	from
		inDC : DCMetamodelo!Composicion
	to
		outER : ERMetamodelo!ForeignKey(
			column <- inDC.origen_c.atributos->asOrderedSet()->first(),
			reference <- inDC.destino_c
		)
}

rule Atributo2Columna {
	from
		inDC : DCMetamodelo!Atributo
	to
		outER : ERMetamodelo!Column(
			name <- inDC.nombre,
			type <- inDC.tipo			
		)
}

rule Clase2Table {
	from 
		inDC : DCMetamodelo!Clase
	to
		outER : ERMetamodelo!Table(
			foreignKeys <- inDC.relaciona,
			foreignKeys <- inDC.compone,
			foreignKeys <- inDC.agrega,
			name <- inDC.nombre,
			columns <- inDC.obtenerAtributos(inDC)
		)
}

--rule Clase2TablaConHerencia {
--	from
--		inDC : DCMetamodelo!Clase (not inDC.hija.oclIsUndefined())
--	to
--		outER : ERMetamodelo!Table (
--			name <- inDC.nombre,	
--			columns <- inDC.atributosPropiosYPadre()
--		)
--}
helper context DCMetamodelo!Clase def: todosLosAtributos(clase : DCMetamodelo!Clase):
	OrderedSet(DCMetamodelo!Atributo) = if clase.hija->isEmpty() then clase.atributos->asOrderedSet()
		else clase.atributos->asOrderedSet()->union(clase.hija->asOrderedSet()->first().atributos->asOrderedSet())
		endif;


--helper context DCMetamodelo!Clase def: todosLosAtributos(clase : DCMetamodelo!Clase):
--	Sequence(DCMetamodelo!Atributo) = if clase.hija.isEmpty() then clase.atributos->asSequence()
--		else clase.atributos->asSequence()->union(clase.obtenerAtributos(clase.hija->asSequence().first()))
--		endif;
--self.atributos->asOrderedSet()->union(self.hija->asOrderedSet()->first().atributos)




helper context DCMetamodelo!Clase def: obtenerAtributos(clase : DCMetamodelo!Clase):
	OrderedSet(DCMetamodelo!Atributo) = clase.atributos;



rule DiagramaClase2DiagramaEntidadRelacion {
	from
		inDC : DCMetamodelo!DiagramEditor
	to	
		outER : ERMetamodelo!Schema (
			name <- inDC.nombre,
			tables <- inDC.clases
		)
			
}