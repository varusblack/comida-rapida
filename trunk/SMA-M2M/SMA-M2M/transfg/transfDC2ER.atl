-- @nsURI ERMetamodelo=http://database/1.0
-- @nsURI DCMetamodelo=http://classdiagrameditor/1.0

module transfDC2ER;
create outER : ERMetamodelo from inDC : DCMetamodelo;

rule Atributo2Columna {
	from
		inDC : DCMetamodelo!Atributo
	to
		outER : ERMetamodelo!Column(
			name <- inDC.nombre,
			type <- inDC.tipo			
		)
}

--rule Clase2TablaSinHerencia {
--	from 
--		inDC : DCMetamodelo!Clase (inDC.hija.isEmpty() or inDC.padre.isEmpty())
--	to
--		outER : ERMetamodelo!Table(
--			name <- inDC.nombre,
--			columns <- inDC.atributos
--		)
--}

rule Clase2TablaConHerencia {
	from
		inDC : DCMetamodelo!Clase (not inDC.hija.oclIsUndefined())
	to
		outER : ERMetamodelo!Table (
			name <- inDC.nombre,	
			columns <- inDC.atributosPropiosYPadre()
		)
}

helper context DCMetamodelo!Clase def: atributosPropiosYPadre(): 
	Sequence(DCMetamodelo!Atributo) = self->collect(c | c.atributos)->asSequence()->union(self.hija.atributos)->asSequence();
--self->collect(c | c.atributos)->asSequence()->union(self.hija.atributos)

--helper context DCMetamodelo!Clase def: atributosPropiosYPadre(): 
--	Sequence(DCMetamodelo!Atributo) = self.atributos->union(self.obtenerAtributos(self.hija));
--self.atributos->asSequence()->union(self.hija.atributos)

helper context DCMetamodelo!Clase def: obtenerAtributos(clase : DCMetamodelo!Clase):
	Set(DCMetamodelo!Atributo) = clase.atributos;

rule DiagramaClase2DiagramaEntidadRelacion {
	from
		inDC : DCMetamodelo!DiagramEditor
	to	
		outER : ERMetamodelo!Schema (
			name <- inDC.nombre,
			tables <- inDC.clases
		)
			
}